{"version":3,"sources":["utils/Api.js","components/Header.js","images/score-icon.svg","utils/utils.js","components/Story.js","components/Main.js","components/Comments.js","components/Comment.js","components/StoryPage.js","components/App.js","index.js"],"names":["BASE_URL","checkResponse","res","ok","json","Promise","reject","status","getStorieById","id","fetch","method","headers","then","getNewStories","ids","all","slice","map","getComments","Header","props","location","useLocation","pathname","className","type","onClick","onStoriesUpdate","to","timeConverter","UnixTime","data","Date","year","getFullYear","month","getMonth","getDate","getHours","getMinutes","getSeconds","Story","onOpenStory","story","title","src","scoreIcon","alt","score","by","time","Main","isSpinnerActive","Spinner","animation","variant","stories","item","Comments","kidsComments","comment","Comment","useState","isShowMoreButtonClick","setIsShowMoreButtonClick","openComments","setOpenComments","setIsSpinnerActive","ListGroup","Item","Card","Text","text","kids","api","comments","catch","err","console","log","StoryPage","clickToUpdate","setClickToUpdate","updateOnceAMinute","setUpdateOnceAMinute","handleClick","useEffect","onUpdateComments","openStory","setTimeout","Body","Title","href","url","target","rel","Button","length","openStoryComments","App","setStories","setOpenStory","setOpenStoryComments","sessionStorage","getItem","JSON","parse","handleUpdateComments","setItem","stringify","exact","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0OAAaA,EAAW,wCAElBC,EAAgB,SAACC,GACnB,OAAGA,EAAIC,GACID,EAAIE,OAERC,QAAQC,OAAR,gDAA0BJ,EAAIK,UAG5BC,EAAgB,SAACC,GAC1B,OAAOC,MAAM,GAAD,OAAIV,EAAJ,iBAAqBS,EAArB,SAAgC,CACxCE,OAAQ,MACRC,QAAS,CACT,eAAgB,sBAGnBC,KAAKZ,IAGGa,EAAgB,WACzB,OAAOJ,MAAM,GAAD,OAAIV,EAAJ,oBAAgC,CACxCW,OAAQ,MACRC,QAAS,CACT,eAAgB,sBAGnBC,KAAKZ,GACLY,MAAK,SAACE,GACH,OAAOV,QAAQW,IACXD,EAAIE,MAAM,EAAG,KAAKC,KAAI,SAACT,GAAD,OAAQD,EAAcC,WAK3CU,EAAc,SAACJ,GACxB,OAAOV,QAAQW,IACXD,EAAIG,KAAI,SAACT,GAAD,OAAQD,EAAcC,Q,OCZvBW,MAtBf,SAAgBC,GACZ,IAAMC,EAAWC,cAAcC,SAM/B,OACI,yBAAQC,UAAU,SAAlB,UACI,oBAAIA,UAAU,gBAAd,yBACe,MAAbH,EAEM,wBAAQI,KAAK,SAASD,UAAU,iBAAiBE,QATjE,WACIN,EAAMO,qBAUM,cAAC,IAAD,CAAMC,GAAG,IAAIJ,UAAU,oBChB5B,MAA0B,uCCAnCK,EAAgB,SAACC,GACnB,IAAMC,EAAO,IAAIC,KAAgB,IAAXF,GAEhBG,EAAOF,EAAKG,cACZC,EAFS,CAAC,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,OAE7DJ,EAAKK,YAM1B,OALaL,EAAKM,UAIE,IAAMF,EAAQ,IAAMF,EAAO,IAHlCF,EAAKO,WAG0C,IAFhDP,EAAKQ,aAEuD,IAD5DR,EAAKS,cCmBNC,MAvBf,SAAerB,GAMX,OACI,eAAC,IAAD,CAAMQ,GAAG,SAASJ,UAAU,QAAQE,QALxC,WACIN,EAAMsB,YAAYtB,EAAMuB,QAIxB,UACI,sBAAKnB,UAAU,qBAAf,UACI,oBAAIA,UAAU,eAAd,SAA8BJ,EAAMuB,MAAMC,QAC1C,oBAAGpB,UAAU,cAAb,UACI,qBAAKA,UAAU,oBAAoBqB,IAAKC,EAAWC,IAAI,0FACtD3B,EAAMuB,MAAMK,YAGrB,sBAAKxB,UAAU,sBAAf,UACI,oBAAGA,UAAU,cAAb,UAA2B,sBAAMA,UAAU,cAAhB,kBAA0CJ,EAAMuB,MAAMM,MACjF,oBAAGzB,UAAU,cAAb,UAA2B,sBAAMA,UAAU,cAAhB,yBAAiDK,EAAcT,EAAMuB,MAAMO,gB,QCAvGC,MAlBf,SAAc/B,GAEV,OACI,sBAAMI,UAAU,UAAhB,SACKJ,EAAMgC,gBACH,cAACC,EAAA,EAAD,CAAS7B,UAAU,UAAU8B,UAAU,SAASC,QAAQ,SAExDnC,EAAMoC,QAAQvC,KAAI,SAAAwC,GACd,GAAa,OAATA,EACA,OAAS,cAAC,EAAD,CAAOd,MAAOc,EAAoBf,YAAatB,EAAMsB,aAA5Be,EAAKjD,U,wBCChDkD,MAXf,SAAkBtC,GAEd,OACI,mCACMA,EAAMuC,aAAa1C,KAAI,SAAA2C,GAAO,OAC3B,cAAC,EAAD,CAASA,QAASA,GAAcA,EAAQpD,UC6C1CqD,MA9Cf,SAAiBzC,GACb,MAA0D0C,oBAAS,GAAnE,mBAAOC,EAAP,KAA8BC,EAA9B,KACA,EAAwCF,mBAAS,IAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KACA,EAA8CJ,oBAAS,GAAvD,mBAAOV,EAAP,KAAwBe,EAAxB,KAgBA,OACI,eAACC,EAAA,EAAUC,KAAX,WACI,cAACC,EAAA,EAAKC,KAAN,UAAYnD,EAAMwC,QAAQY,OAC1B,sBAAKhD,UAAU,eAAf,UACI,eAAC8C,EAAA,EAAKC,KAAN,WACI,sBAAM/C,UAAU,cAAhB,gBADJ,IAC6CJ,EAAMwC,QAAQX,GACvD,sBAAMzB,UAAU,cAAhB,iBAFJ,IAE8CK,EAAcT,EAAMwC,QAAQV,SAExE9B,EAAMwC,QAAQa,MACX,mCACG,wBAAQhD,KAAK,SAASD,UAAU,mBAAmBE,QAxBvE,WACIsC,GAA0BD,GAC1BI,GAAmB,GACnBO,EAAgBtD,EAAMwC,QAAQa,MAC7B7D,MAAK,SAAC+D,GACHR,GAAmB,GACnBD,EAAgBS,MAEnBC,OAAM,SAACC,GACJV,GAAmB,GACnBW,QAAQC,IAAIF,cAkBTzD,EAAMwC,QAAQa,MAAQV,GACrB,mCACCX,EACG,cAACC,EAAA,EAAD,CAASC,UAAU,SAASC,QAAQ,SAEpC,cAAC,EAAD,CAAUI,aAAcM,UCuB5Be,MA9DhB,SAAoB5D,GAChB,MAA0C0C,oBAAS,GAAnD,mBAAOmB,EAAP,KAAsBC,EAAtB,KACA,EAAkDpB,oBAAS,GAA3D,mBAAOqB,EAAP,KAA0BC,EAA1B,KAaA,SAASC,IACLH,GAAkBD,GAGtB,OAfAK,qBAAU,WACNlE,EAAMmE,iBAAiBnE,EAAMoE,aAC9B,CAACP,IAEJK,qBAAU,WACNG,YAAY,WACRL,GAAsBD,GACtB/D,EAAMmE,iBAAiBnE,EAAMoE,aAC9B,OACJ,CAACL,IAOA,uBAAM3D,UAAU,UAAhB,UACI,cAAC8C,EAAA,EAAD,CAAM9C,UAAU,aAAhB,SACI,eAAC8C,EAAA,EAAKoB,KAAN,WACI,cAACpB,EAAA,EAAKqB,MAAN,CAAYnE,UAAU,oBAAtB,SAA2CJ,EAAMoE,UAAU5C,QAC3D,eAAC0B,EAAA,EAAKC,KAAN,WACI,sBAAM/C,UAAU,cAAhB,qBAA6CK,EAAcT,EAAMoE,UAAUtC,MAC3E,sBAAM1B,UAAU,cAAhB,kBAA0CJ,EAAMoE,UAAUvC,MAE9D,mBAAG2C,KAAMxE,EAAMoE,UAAUK,IAAKC,OAAO,SAASC,IAAI,aAAlD,SACI,cAACC,EAAA,EAAD,CAAQzC,QAAQ,UAAhB,+BAIZ,cAACe,EAAA,EAAD,CAAM9C,UAAU,iBAAhB,SACKJ,EAAMoE,UAAUf,KAChB,qCACG,eAACH,EAAA,EAAKnD,OAAN,CAAaK,UAAU,yBAAvB,UACI,oBAAGA,UAAU,wBAAb,4BAAgDJ,EAAMoE,UAAUf,KAAKwB,OAArE,YACA,wBAAQxE,KAAK,SAASD,UAAU,uCAAuCE,QAAS2D,OAEpF,cAACjB,EAAA,EAAD,CAAWb,QAAQ,QAAnB,SAEQnC,EAAM8E,kBAAkBjF,KAAI,SAAA2C,GAAO,OAC9B,cAAC,EAAD,CACGA,QAASA,GACJA,EAAQpD,YAO7B,eAAC8D,EAAA,EAAKnD,OAAN,CAAaK,UAAU,yBAAvB,UACI,mBAAGA,UAAU,wBAAb,gCACA,wBAAQC,KAAK,SAASD,UAAU,uCAAuCE,QAAS2D,aCsCzFc,MA1Ff,WACI,MAA8BrC,mBAAS,IAAvC,mBAAON,EAAP,KAAgB4C,EAAhB,KACA,EAAkCtC,mBAAS,IAA3C,mBAAO0B,EAAP,KAAkBa,EAAlB,KACA,EAAkDvC,mBAAS,IAA3D,mBAAOoC,EAAP,KAA0BI,EAA1B,KACA,EAA8CxC,oBAAS,GAAvD,mBAAOV,EAAP,KAAwBe,EAAxB,KACA,EAA0CL,oBAAS,GAAnD,mBAAOmB,EAAP,KAAsBC,EAAtB,KACA,EAAkDpB,oBAAS,GAA3D,mBAAOqB,EAAP,KAA0BC,EAA1B,KAEAE,qBAAU,WACFiB,eAAeC,QAAQ,cAEvBH,EAAaI,KAAKC,MAAMH,eAAeC,QAAQ,eAE/CD,eAAeC,QAAQ,sBAEvBF,EAAqBG,KAAKC,MAAMH,eAAeC,QAAQ,uBAE3DrC,GAAmB,GACnBO,IACC9D,MAAK,SAAC4C,GACHW,GAAmB,GACnBiC,EAAW5C,MAEdoB,OAAM,SAACC,GACJV,GAAmB,GACnBW,QAAQC,IAAIF,QAEjB,CAACI,IAEJK,qBAAU,WACNG,YAAY,WACRL,GAAsBD,GACtBT,IACC9D,MAAK,SAAC4C,GACHW,GAAmB,GACnBiC,EAAW5C,MAEdoB,OAAM,SAACC,GACJV,GAAmB,GACnBW,QAAQC,IAAIF,QAEjB,OACJ,CAACM,IAEJ,IAUMwB,EAAuB,SAAChE,GACtBA,EAAM8B,MACNC,EAAgB/B,EAAM8B,MACrB7D,MAAK,SAAC+D,GACH2B,EAAqB3B,GACrB4B,eAAeK,QAAQ,oBAAqBH,KAAKI,UAAUlC,OAE9DC,OAAM,SAACC,GACJC,QAAQC,IAAIF,OAKxB,OACI,sBAAKrD,UAAU,OAAf,UACI,cAAC,EAAD,CAAQG,gBAzBY,WACxBuD,GAAkBD,MAyBd,eAAC,IAAD,WACI,cAAC,IAAD,CAAO6B,OAAK,EAACC,KAAK,IAAlB,SACI,cAAC,EAAD,CACIvD,QAASA,EACTd,YA1BI,SAACC,GACrB0D,EAAa1D,GACb4D,eAAeK,QAAQ,YAAaH,KAAKI,UAAUlE,IACnDgE,EAAqBhE,IAwBLS,gBAAiBA,MAGzB,cAAC,IAAD,CAAO2D,KAAK,SAAZ,SACI,cAAC,EAAD,CACIvB,UAAWA,EACXU,kBAAmBA,EACnBX,iBAAkBoB,aClF1CK,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,W","file":"static/js/main.8b158ec8.chunk.js","sourcesContent":["export const BASE_URL = 'https://hacker-news.firebaseio.com/v0';\n\nconst checkResponse = (res) => {\n    if(res.ok) {\n        return res.json()\n    } \n    return Promise.reject(`Ошибка: ${res.status}`) \n};\n\nexport const getStorieById = (id) => {\n    return fetch(`${BASE_URL}/item/${id}.json`, {\n        method: 'GET',\n        headers: {\n        'Content-Type': 'application/json',\n        }\n    })\n    .then(checkResponse)\n};\n\nexport const getNewStories = () => {\n    return fetch(`${BASE_URL}/newstories.json`, {\n        method: 'GET',\n        headers: {\n        'Content-Type': 'application/json',\n        }\n    })\n    .then(checkResponse)\n    .then((ids) => {\n        return Promise.all(\n            ids.slice(0, 100).map((id) => getStorieById(id))\n        )\n    })\n};\n\nexport const getComments = (ids) => {\n    return Promise.all(\n        ids.map((id) => getStorieById(id))\n    )\n};\n","import { Link, useLocation } from 'react-router-dom';\n\nfunction Header(props) {\n    const location = useLocation().pathname;\n\n    function handleClick() {\n        props.onStoriesUpdate();\n    };\n\n    return (\n        <header className=\"header\">\n            <h1 className=\"header__title\">Hacker News</h1>\n            {(location === \"/\") ?\n                (\n                    <button type=\"button\" className=\"refresh-button\" onClick={handleClick}></button>\n                ):(\n                    <Link to=\"/\" className=\"back-button\"></Link>\n                )\n            }\n            \n        </header>\n    );\n}\n\nexport default Header;\n","export default __webpack_public_path__ + \"static/media/score-icon.410ea62d.svg\";","const timeConverter = (UnixTime) => {\n    const data = new Date(UnixTime * 1000);\n    const months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];\n    const year = data.getFullYear();\n    const month = months[data.getMonth()];\n    const date = data.getDate();\n    const hour = data.getHours();\n    const min = data.getMinutes();\n    const sec = data.getSeconds();\n    const time = date + ' ' + month + ' ' + year + ' ' + hour + ':' + min + ':' + sec ;\n    return time;\n}\n\nexport {timeConverter}\n","import { Link } from 'react-router-dom';\nimport scoreIcon from '../images/score-icon.svg';\nimport {timeConverter} from '../utils/utils';\n\nfunction Story(props) {\n    \n    function handleClick() {\n        props.onOpenStory(props.story);\n    };\n\n    return (\n        <Link to=\"/story\" className=\"story\" onClick={handleClick}>\n            <div className=\"story__top-wrapper\">\n                <h2 className=\"story__title\">{props.story.title}</h2>\n                <p className=\"story__text\">\n                    <img className=\"story__score-icon\" src={scoreIcon} alt=\"Иконка рейтинга\"/>\n                    {props.story.score}\n                </p>\n            </div>\n            <div className=\"story__down-wrapper\">\n                <p className=\"story__text\"><span className=\"text-accent\">By: </span>{props.story.by}</p>\n                <p className=\"story__text\"><span className=\"text-accent\">Posted at: </span>{timeConverter(props.story.time)}</p>\n            </div>\n        </Link>\n    );\n}\n\nexport default Story;\n","import Story from './Story';\nimport { Spinner } from 'react-bootstrap';\n\nfunction Main(props) {\n    \n    return (\n        <main className=\"content\">\n            {props.isSpinnerActive ? (\n                <Spinner className=\"spinner\" animation=\"border\" variant=\"dark\"/>\n            ) : (\n                props.stories.map(item => {\n                    if (item !== null) {\n                        return ( <Story story={item} key={item.id} onOpenStory={props.onOpenStory}/> )\n                    }\n                })\n            )}\n            \n        </main>\n    );\n}\n\nexport default Main;\n","import Comment from './Comment';\n\nfunction Comments(props) {\n\n    return (\n        <>\n            { props.kidsComments.map(comment => \n                (<Comment comment={comment} key={comment.id}></Comment>)\n            )}\n        </>\n    );\n}\n\nexport default Comments;\n","import { useState } from 'react';\nimport { Card, ListGroup, Spinner } from 'react-bootstrap';\nimport * as api from '../utils/Api';\nimport Comments from './Comments';\nimport {timeConverter} from '../utils/utils';\n\nfunction Comment(props) {\n    const [isShowMoreButtonClick, setIsShowMoreButtonClick] = useState(false);\n    const [openComments, setOpenComments] = useState([]);\n    const [isSpinnerActive, setIsSpinnerActive] = useState(false);\n\n    function handleClick() {\n        setIsShowMoreButtonClick(!isShowMoreButtonClick);\n        setIsSpinnerActive(true);\n        api.getComments(props.comment.kids)\n        .then((comments) => {\n            setIsSpinnerActive(false);\n            setOpenComments(comments);\n        })\n        .catch((err) => {\n            setIsSpinnerActive(false);\n            console.log(err);\n        });\n    };\n\n    return (\n        <ListGroup.Item>\n            <Card.Text>{props.comment.text}</Card.Text>\n            <div className=\"comment-info\">\n                <Card.Text>\n                    <span className=\"text-accent\">by</span> {props.comment.by} \n                    <span className=\"text-accent\"> at</span> {timeConverter(props.comment.time)}\n                </Card.Text>\n                { props.comment.kids &&\n                    (<>\n                        <button type=\"button\" className=\"show-more-button\" onClick={handleClick}></button>\n                    </>)\n                }\n            </div>\n            { (props.comment.kids && isShowMoreButtonClick) && \n                <>\n                {isSpinnerActive ? (\n                    <Spinner animation=\"border\" variant=\"dark\"/>\n                ) : (\n                    <Comments kidsComments={openComments}></Comments>\n                )}\n                </>\n            }\n        </ListGroup.Item>\n    );\n}\n\nexport default Comment;\n","import { useState, useEffect } from 'react';\nimport { Card, Button, ListGroup } from 'react-bootstrap';\nimport Comment from './Comment';\nimport {timeConverter} from '../utils/utils';\n\nfunction  StoryPage(props) {\n    const [clickToUpdate, setClickToUpdate] = useState(false);\n    const [updateOnceAMinute, setUpdateOnceAMinute] = useState(false);\n\n    useEffect(() => {\n        props.onUpdateComments(props.openStory);\n    }, [clickToUpdate]);\n\n    useEffect(() => {\n        setTimeout( () => {\n            setUpdateOnceAMinute(!updateOnceAMinute);\n            props.onUpdateComments(props.openStory);\n        }, 60000);\n    }, [updateOnceAMinute]);\n\n    function handleClick() {\n        setClickToUpdate(!clickToUpdate);\n    };\n    \n    return (\n        <main className=\"content\">\n            <Card className=\"story-card\">\n                <Card.Body>\n                    <Card.Title className=\"story-card__title\">{props.openStory.title}</Card.Title>\n                    <Card.Text>\n                        <span className=\"text-accent\">Posted </span>{timeConverter(props.openStory.time)} \n                        <span className=\"text-accent\"> by </span>{props.openStory.by}\n                    </Card.Text>\n                    <a href={props.openStory.url} target=\"_blank\" rel=\"noreferrer\">\n                        <Button variant=\"primary\">Learn more</Button>\n                    </a>\n                </Card.Body>\n            </Card>\n            <Card className=\"story-comments\">\n                {props.openStory.kids ?\n                (<>\n                    <Card.Header className=\"story-comments__header\">\n                        <p className=\"story-comments__title\">Сommented {props.openStory.kids.length} times</p>\n                        <button type=\"button\" className=\"refresh-button refresh-button__small\" onClick={handleClick}></button>\n                    </Card.Header>\n                    <ListGroup variant=\"flush\">\n                        {\n                            props.openStoryComments.map(comment => \n                                (<Comment \n                                    comment={comment} \n                                    key={comment.id}>\n                                </Comment>)\n                            )\n                        }\n                    </ListGroup>\n                </>\n                ) : (\n                    <Card.Header className=\"story-comments__header\">\n                        <p className=\"story-comments__title\">No comments yet :(</p>\n                        <button type=\"button\" className=\"refresh-button refresh-button__small\" onClick={handleClick}></button>\n                    </Card.Header>\n                )}\n            </Card>\n        </main>      \n    );\n}\n\nexport default  StoryPage;\n","import { useEffect, useState } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport * as api from '../utils/Api';\nimport Header from './Header';\nimport Main from './Main';\nimport StoryPage from './StoryPage';\n\nfunction App() {\n    const [stories, setStories] = useState([]);\n    const [openStory, setOpenStory] = useState({});\n    const [openStoryComments, setOpenStoryComments] = useState([]);\n    const [isSpinnerActive, setIsSpinnerActive] = useState(false);\n    const [clickToUpdate, setClickToUpdate] = useState(false);\n    const [updateOnceAMinute, setUpdateOnceAMinute] = useState(false);\n\n    useEffect(() => {\n        if (sessionStorage.getItem('openStory')) {\n            // чтобы при обновлении старницы с новостью, новость не терялась\n            setOpenStory(JSON.parse(sessionStorage.getItem('openStory')));\n        }\n        if (sessionStorage.getItem('openStoryComments')) {\n            // чтобы при обновлении старницы с новостью, комментарии не терялись\n            setOpenStoryComments(JSON.parse(sessionStorage.getItem('openStoryComments')));\n        }\n        setIsSpinnerActive(true);\n        api.getNewStories()\n        .then((stories) => {\n            setIsSpinnerActive(false);\n            setStories(stories);\n        })\n        .catch((err) => {\n            setIsSpinnerActive(false);\n            console.log(err);\n        });\n    }, [clickToUpdate]);\n\n    useEffect(() => {\n        setTimeout( () => {\n            setUpdateOnceAMinute(!updateOnceAMinute);\n            api.getNewStories()\n            .then((stories) => {\n                setIsSpinnerActive(false);\n                setStories(stories);\n            })\n            .catch((err) => {\n                setIsSpinnerActive(false);\n                console.log(err);\n            });\n        }, 60000);\n    }, [updateOnceAMinute]);\n\n    const handleStoriesUpdate = () => {\n        setClickToUpdate(!clickToUpdate);\n    };\n\n    const handleOpenStory = (story) => {\n        setOpenStory(story);\n        sessionStorage.setItem('openStory', JSON.stringify(story));\n        handleUpdateComments(story);\n    };\n\n    const handleUpdateComments = (story) => {\n        if (story.kids) {\n            api.getComments(story.kids)\n            .then((comments) => {\n                setOpenStoryComments(comments);\n                sessionStorage.setItem('openStoryComments', JSON.stringify(comments));\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n        }\n    }\n\n    return (\n        <div className=\"page\">\n            <Header onStoriesUpdate={handleStoriesUpdate}/>\n            <Switch>\n                <Route exact path=\"/\">\n                    <Main\n                        stories={stories}\n                        onOpenStory={handleOpenStory}\n                        isSpinnerActive={isSpinnerActive}\n                    />\n                </Route>\n                <Route path=\"/story\">\n                    <StoryPage \n                        openStory={openStory}\n                        openStoryComments={openStoryComments}\n                        onUpdateComments={handleUpdateComments}\n                />\n                </Route>\n            </Switch>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './components/App.js';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}